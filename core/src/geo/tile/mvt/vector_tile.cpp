// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector_tile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "geo/tile/mvt/vector_tile.hpp"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vector_tile {

namespace {

const ::google::protobuf::Descriptor* Tile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tile_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tile_Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tile_Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tile_Feature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tile_Feature_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tile_Layer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tile_Layer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Tile_GeomType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_vector_5ftile_2eproto() {
  protobuf_AddDesc_vector_5ftile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vector_tile.proto");
  GOOGLE_CHECK(file != NULL);
  Tile_descriptor_ = file->message_type(0);
  static const int Tile_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, layers_),
  };
  Tile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tile_descriptor_,
      Tile::default_instance_,
      Tile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tile));
  Tile_Value_descriptor_ = Tile_descriptor_->nested_type(0);
  static const int Tile_Value_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, float_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, uint_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, sint_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, bool_value_),
  };
  Tile_Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tile_Value_descriptor_,
      Tile_Value::default_instance_,
      Tile_Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tile_Value));
  Tile_Feature_descriptor_ = Tile_descriptor_->nested_type(1);
  static const int Tile_Feature_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Feature, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Feature, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Feature, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Feature, geometry_),
  };
  Tile_Feature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tile_Feature_descriptor_,
      Tile_Feature::default_instance_,
      Tile_Feature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Feature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Feature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tile_Feature));
  Tile_Layer_descriptor_ = Tile_descriptor_->nested_type(2);
  static const int Tile_Layer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, extent_),
  };
  Tile_Layer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tile_Layer_descriptor_,
      Tile_Layer::default_instance_,
      Tile_Layer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tile_Layer));
  Tile_GeomType_descriptor_ = Tile_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vector_5ftile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tile_descriptor_, &Tile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tile_Value_descriptor_, &Tile_Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tile_Feature_descriptor_, &Tile_Feature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tile_Layer_descriptor_, &Tile_Layer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vector_5ftile_2eproto() {
  delete Tile::default_instance_;
  delete Tile_reflection_;
  delete Tile_Value::default_instance_;
  delete Tile_Value_reflection_;
  delete Tile_Feature::default_instance_;
  delete Tile_Feature_reflection_;
  delete Tile_Layer::default_instance_;
  delete Tile_Layer_reflection_;
}

void protobuf_AddDesc_vector_5ftile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021vector_tile.proto\022\013vector_tile\"\300\004\n\004Til"
    "e\022\'\n\006layers\030\003 \003(\0132\027.vector_tile.Tile.Lay"
    "er\032\241\001\n\005Value\022\024\n\014string_value\030\001 \001(\t\022\023\n\013fl"
    "oat_value\030\002 \001(\002\022\024\n\014double_value\030\003 \001(\001\022\021\n"
    "\tint_value\030\004 \001(\003\022\022\n\nuint_value\030\005 \001(\004\022\022\n\n"
    "sint_value\030\006 \001(\022\022\022\n\nbool_value\030\007 \001(\010*\010\010\010"
    "\020\200\200\200\200\002\032s\n\007Feature\022\r\n\002id\030\001 \001(\004:\0010\022\020\n\004tags"
    "\030\002 \003(\rB\002\020\001\0221\n\004type\030\003 \001(\0162\032.vector_tile.T"
    "ile.GeomType:\007UNKNOWN\022\024\n\010geometry\030\004 \003(\rB"
    "\002\020\001\032\255\001\n\005Layer\022\022\n\007version\030\017 \002(\r:\0011\022\014\n\004nam"
    "e\030\001 \002(\t\022+\n\010features\030\002 \003(\0132\031.vector_tile."
    "Tile.Feature\022\014\n\004keys\030\003 \003(\t\022\'\n\006values\030\004 \003"
    "(\0132\027.vector_tile.Tile.Value\022\024\n\006extent\030\005 "
    "\001(\r:\0044096*\010\010\020\020\200\200\200\200\002\"\?\n\010GeomType\022\013\n\007UNKNO"
    "WN\020\000\022\t\n\005POINT\020\001\022\016\n\nLINESTRING\020\002\022\013\n\007POLYG"
    "ON\020\003*\005\010\020\020\200@B\002H\002", 615);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vector_tile.proto", &protobuf_RegisterTypes);
  Tile::default_instance_ = new Tile();
  Tile_Value::default_instance_ = new Tile_Value();
  Tile_Feature::default_instance_ = new Tile_Feature();
  Tile_Layer::default_instance_ = new Tile_Layer();
  Tile::default_instance_->InitAsDefaultInstance();
  Tile_Value::default_instance_->InitAsDefaultInstance();
  Tile_Feature::default_instance_->InitAsDefaultInstance();
  Tile_Layer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vector_5ftile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vector_5ftile_2eproto {
  StaticDescriptorInitializer_vector_5ftile_2eproto() {
    protobuf_AddDesc_vector_5ftile_2eproto();
  }
} static_descriptor_initializer_vector_5ftile_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Tile_GeomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tile_GeomType_descriptor_;
}
bool Tile_GeomType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Tile_GeomType Tile::UNKNOWN;
const Tile_GeomType Tile::POINT;
const Tile_GeomType Tile::LINESTRING;
const Tile_GeomType Tile::POLYGON;
const Tile_GeomType Tile::GeomType_MIN;
const Tile_GeomType Tile::GeomType_MAX;
const int Tile::GeomType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Tile_Value::kStringValueFieldNumber;
const int Tile_Value::kFloatValueFieldNumber;
const int Tile_Value::kDoubleValueFieldNumber;
const int Tile_Value::kIntValueFieldNumber;
const int Tile_Value::kUintValueFieldNumber;
const int Tile_Value::kSintValueFieldNumber;
const int Tile_Value::kBoolValueFieldNumber;
#endif  // !_MSC_VER

Tile_Value::Tile_Value()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vector_tile.Tile.Value)
}

void Tile_Value::InitAsDefaultInstance() {
}

Tile_Value::Tile_Value(const Tile_Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vector_tile.Tile.Value)
}

void Tile_Value::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  float_value_ = 0;
  double_value_ = 0;
  int_value_ = GOOGLE_LONGLONG(0);
  uint_value_ = GOOGLE_ULONGLONG(0);
  sint_value_ = GOOGLE_LONGLONG(0);
  bool_value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tile_Value::~Tile_Value() {
  // @@protoc_insertion_point(destructor:vector_tile.Tile.Value)
  SharedDtor();
}

void Tile_Value::SharedDtor() {
  if (string_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete string_value_;
  }
  if (this != default_instance_) {
  }
}

void Tile_Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tile_Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tile_Value_descriptor_;
}

const Tile_Value& Tile_Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vector_5ftile_2eproto();
  return *default_instance_;
}

Tile_Value* Tile_Value::default_instance_ = NULL;

Tile_Value* Tile_Value::New() const {
  return new Tile_Value;
}

void Tile_Value::Swap(Tile_Value* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Tile_Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tile_Value_descriptor_;
  metadata.reflection = Tile_Value_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Tile_Feature::kIdFieldNumber;
const int Tile_Feature::kTagsFieldNumber;
const int Tile_Feature::kTypeFieldNumber;
const int Tile_Feature::kGeometryFieldNumber;
#endif  // !_MSC_VER

Tile_Feature::Tile_Feature()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vector_tile.Tile.Feature)
}

void Tile_Feature::InitAsDefaultInstance() {
}

Tile_Feature::Tile_Feature(const Tile_Feature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vector_tile.Tile.Feature)
}

void Tile_Feature::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tile_Feature::~Tile_Feature() {
  // @@protoc_insertion_point(destructor:vector_tile.Tile.Feature)
  SharedDtor();
}

void Tile_Feature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tile_Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tile_Feature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tile_Feature_descriptor_;
}

const Tile_Feature& Tile_Feature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vector_5ftile_2eproto();
  return *default_instance_;
}

Tile_Feature* Tile_Feature::default_instance_ = NULL;

Tile_Feature* Tile_Feature::New() const {
  return new Tile_Feature;
}

void Tile_Feature::Swap(Tile_Feature* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Tile_Feature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tile_Feature_descriptor_;
  metadata.reflection = Tile_Feature_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Tile_Layer::kVersionFieldNumber;
const int Tile_Layer::kNameFieldNumber;
const int Tile_Layer::kFeaturesFieldNumber;
const int Tile_Layer::kKeysFieldNumber;
const int Tile_Layer::kValuesFieldNumber;
const int Tile_Layer::kExtentFieldNumber;
#endif  // !_MSC_VER

Tile_Layer::Tile_Layer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vector_tile.Tile.Layer)
}

void Tile_Layer::InitAsDefaultInstance() {
}

Tile_Layer::Tile_Layer(const Tile_Layer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vector_tile.Tile.Layer)
}

void Tile_Layer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 1u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extent_ = 4096u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tile_Layer::~Tile_Layer() {
  // @@protoc_insertion_point(destructor:vector_tile.Tile.Layer)
  SharedDtor();
}

void Tile_Layer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Tile_Layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tile_Layer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tile_Layer_descriptor_;
}

const Tile_Layer& Tile_Layer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vector_5ftile_2eproto();
  return *default_instance_;
}

Tile_Layer* Tile_Layer::default_instance_ = NULL;

Tile_Layer* Tile_Layer::New() const {
  return new Tile_Layer;
}

void Tile_Layer::Swap(Tile_Layer* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Tile_Layer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tile_Layer_descriptor_;
  metadata.reflection = Tile_Layer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Tile::kLayersFieldNumber;
#endif  // !_MSC_VER

Tile::Tile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vector_tile.Tile)
}

void Tile::InitAsDefaultInstance() {
}

Tile::Tile(const Tile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vector_tile.Tile)
}

void Tile::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tile::~Tile() {
  // @@protoc_insertion_point(destructor:vector_tile.Tile)
  SharedDtor();
}

void Tile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tile_descriptor_;
}

const Tile& Tile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vector_5ftile_2eproto();
  return *default_instance_;
}

Tile* Tile::default_instance_ = NULL;

Tile* Tile::New() const {
  return new Tile;
}

void Tile::Swap(Tile* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Tile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tile_descriptor_;
  metadata.reflection = Tile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vector_tile

// @@protoc_insertion_point(global_scope)
